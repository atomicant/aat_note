<?php
// $Id$

/**
 * @file
 * Lets users add private annotations to nodes.
 *
 * Adds a text field when a node is displayed so that authenticated users may
 * make notes.
 *
 * Most of the code was taken from Annotate example module
 * Drupal Pro Development 2nd Edition by John K. VanDyk
 */

/**
 * Implementation of hook_menu().
 */
function aat_note_menu() {
  $items = array();

  $items['admin/settings/aat-note'] = array(
    'title' => 'Annotation settings',
    'description' => 'Change how annotations behave',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('aat_note_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'aat_note.admin.inc',
  );

  $items['user/%user/aat-notes'] = array(
    'title' => 'My notes',
    'description' => 'View my notes.',
    'page callback' => 'aat_note_user_notes',
    'page arguments' => array(1),
    'access callback' => 'aat_note_check_access',
    'access arguments' => array('view', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'aat_note.admin.inc',
  );

  $items['user/%user/aat-notes/delete'] = array(
    'title' => 'Delete notes',
    'description' => 'Delete all notes for given user.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('aat_note_user_notes_delete', 1),
    'access callback' => 'aat_note_check_access',
    'access arguments' => array('delete', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'aat_note.admin.inc',
  );

  return $items;
}

/**
 * Access helper function
 *
 * @param type $action
 * @param type $account
 * @param type $note
 *
 * @return boolean
 */
function aat_note_check_access($action, $account, $note = NULL) {
  global $user;
  $access = FALSE;

  switch ($action) {
    case 'view':
      // administrator site-wide permission
      if (user_access('view all aat-notes')) {
        $access = TRUE;
      }
      // author permission for specific note
      elseif (!is_null($note) && user_access('view own aat-notes')) {
        $access = $account->uid == $note->uid;
      }
      // author permission
      elseif (user_access('view own aat-notes')) {
        $access = $account->uid == $user->uid;
      }
      break;
    case 'delete':
      // administrator site-wide permission
      if (user_access('delete all aat-notes')) {
        $access = TRUE;
      }
      // author permission for specific note
      elseif (!is_null($note) && user_access('delete own aat-notes')) {
        $access = $account->uid == $note->uid;
      }
      // author permission
      elseif (user_access('delete own aat-notes')) {
        $access = $account->uid == $user->uid;
      }
      break;

    default:
  }

  return $access;
}

/**
 * Implementation of hook_perm().
 */
function aat_note_perm() {
  return array(
    'view own aat-notes',
    'view all aat-notes',
  );
}

/**
 * Implementation of hook_nodeapi().
 */
function aat_note_nodeapi(&$node, $op, $teaser, $page) {
  global $user;
  switch ($op) {
    // The 'view' operation means the node is about to be displayed.
    case 'view':
      // Abort if the user is an anonymous user (not logged in) or
      // if the node is not being displayed on a page by itself
      // (for example, it could be in a node listing or search result).
      if ($user->uid == 0 || !$page) {
        break;
      }
      // Find out which node types we should aat_note.
      $types_to_aat_note = variable_get('aat_note_node_types', array('page'));

      // Abort if this node is not one of the types we should aat_note.
      if (!in_array($node->type, $types_to_aat_note, TRUE)) {
        break;
      }

      // Get the current annotation for this node from the database
      // and store it in the node object.
      $result = db_query('SELECT note FROM {aat_note} WHERE nid = %d AND uid = %d', $node->nid, $user->uid);
      $node->annotation = db_result($result);

      // Add our form as a content item.
      $node->content['annotation_form'] = array(
        '#value' => drupal_get_form('aat_note_entry_form', $node),
        '#weight' => 10
      );
      break;

    case 'delete':
      db_query('DELETE FROM {aat_note} WHERE nid = %d', $node->nid);
      break;
  }
}

/**
 * Define the form for entering an annotation.
 */
function aat_note_entry_form($form_state, $node) {
  $form = array();
  // Define a fieldset.
  $form['aat_note'] = array(
    '#type' => 'fieldset',
    '#title' => t('Note')
  );

  // Define a textarea inside the fieldset.
  $form['aat_note']['note'] = array(
    '#type' => 'textarea',
    '#title' => t('Notes'),
    '#default_value' => isset($node->annotation) ? $node->annotation : '',
    '#description' => t('Make your personal note about this. Only you (and the site administrator) will be able to see them.')
  );

  // For convenience, save the node id.
  $form['aat_note']['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid
  );

  // Define a submit button.
  $form['aat_note']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update')
  );
  return $form;
}

/**
 * Handle submission of the annotation form and saving
 * of the data to the database.
 */
function aat_note_entry_form_submit($form, $form_state) {
  global $user;

  $note = $form_state['values']['note'];
  $nid = $form_state['values']['nid'];

  db_query('DELETE FROM {aat_note} WHERE nid = %d AND uid = %d', $nid, $user->uid);
  db_query("INSERT INTO {aat_note} (nid, uid, note, created) VALUES (%d, %d, '%s', %d)", $nid, $user->uid, $note, time());
  drupal_set_message(t('Your annotation has been saved.'));
}
